///
/// Uniwind-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::uniwind { enum class ColorScheme; }
// Forward declaration of `Dimensions` to properly resolve imports.
namespace margelo::nitro::uniwind { struct Dimensions; }
// Forward declaration of `HybridNativePlatformSpec` to properly resolve imports.
namespace margelo::nitro::uniwind { class HybridNativePlatformSpec; }
// Forward declaration of `Insets` to properly resolve imports.
namespace margelo::nitro::uniwind { struct Insets; }
// Forward declaration of `Orientation` to properly resolve imports.
namespace margelo::nitro::uniwind { enum class Orientation; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNativePlatformSpec_cxx` to properly resolve imports.
namespace Uniwind { class HybridNativePlatformSpec_cxx; }

// Include C++ defined types
#include "ColorScheme.hpp"
#include "Dimensions.hpp"
#include "HybridNativePlatformSpec.hpp"
#include "Insets.hpp"
#include "Orientation.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::uniwind::bridge::swift {

  // pragma MARK: std::shared_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec>`.
   */
  using std__shared_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_ = std::shared_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec>;
  std::shared_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec> create_std__shared_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_(std__shared_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec>
  using std__weak_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_ = std::weak_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec>;
  inline std__weak_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_ weakify_std__shared_ptr_margelo__nitro__uniwind__HybridNativePlatformSpec_(const std::shared_ptr<margelo::nitro::uniwind::HybridNativePlatformSpec>& strong) { return strong; }
  
  // pragma MARK: Result<Insets>
  using Result_Insets_ = Result<Insets>;
  inline Result_Insets_ create_Result_Insets_(const Insets& value) {
    return Result<Insets>::withValue(value);
  }
  inline Result_Insets_ create_Result_Insets_(const std::exception_ptr& error) {
    return Result<Insets>::withError(error);
  }
  
  // pragma MARK: Result<ColorScheme>
  using Result_ColorScheme_ = Result<ColorScheme>;
  inline Result_ColorScheme_ create_Result_ColorScheme_(ColorScheme value) {
    return Result<ColorScheme>::withValue(std::move(value));
  }
  inline Result_ColorScheme_ create_Result_ColorScheme_(const std::exception_ptr& error) {
    return Result<ColorScheme>::withError(error);
  }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) {
    return Result<double>::withError(error);
  }
  
  // pragma MARK: Result<Orientation>
  using Result_Orientation_ = Result<Orientation>;
  inline Result_Orientation_ create_Result_Orientation_(Orientation value) {
    return Result<Orientation>::withValue(std::move(value));
  }
  inline Result_Orientation_ create_Result_Orientation_(const std::exception_ptr& error) {
    return Result<Orientation>::withError(error);
  }
  
  // pragma MARK: Result<Dimensions>
  using Result_Dimensions_ = Result<Dimensions>;
  inline Result_Dimensions_ create_Result_Dimensions_(const Dimensions& value) {
    return Result<Dimensions>::withValue(value);
  }
  inline Result_Dimensions_ create_Result_Dimensions_(const std::exception_ptr& error) {
    return Result<Dimensions>::withError(error);
  }
  
  // pragma MARK: Result<bool>
  using Result_bool_ = Result<bool>;
  inline Result_bool_ create_Result_bool_(bool value) {
    return Result<bool>::withValue(std::move(value));
  }
  inline Result_bool_ create_Result_bool_(const std::exception_ptr& error) {
    return Result<bool>::withError(error);
  }

} // namespace margelo::nitro::uniwind::bridge::swift
