///
/// JHybridNativePlatformSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNativePlatformSpec.hpp"

// Forward declaration of `Insets` to properly resolve imports.
namespace margelo::nitro::uniwind { struct Insets; }
// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::uniwind { enum class ColorScheme; }
// Forward declaration of `Orientation` to properly resolve imports.
namespace margelo::nitro::uniwind { enum class Orientation; }
// Forward declaration of `Dimensions` to properly resolve imports.
namespace margelo::nitro::uniwind { struct Dimensions; }

#include "Insets.hpp"
#include "JInsets.hpp"
#include "ColorScheme.hpp"
#include "JColorScheme.hpp"
#include "Orientation.hpp"
#include "JOrientation.hpp"
#include "Dimensions.hpp"
#include "JDimensions.hpp"

namespace margelo::nitro::uniwind {

  jni::local_ref<JHybridNativePlatformSpec::jhybriddata> JHybridNativePlatformSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNativePlatformSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNativePlatformSpec::initHybrid),
    });
  }

  size_t JHybridNativePlatformSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNativePlatformSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  Insets JHybridNativePlatformSpec::getInsets() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JInsets>()>("getInsets");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  ColorScheme JHybridNativePlatformSpec::getColorScheme() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JColorScheme>()>("getColorScheme");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  double JHybridNativePlatformSpec::getFontScale() {
    static const auto method = javaClassStatic()->getMethod<double()>("getFontScale");
    auto __result = method(_javaPart);
    return __result;
  }
  double JHybridNativePlatformSpec::getPixelRatio() {
    static const auto method = javaClassStatic()->getMethod<double()>("getPixelRatio");
    auto __result = method(_javaPart);
    return __result;
  }
  Orientation JHybridNativePlatformSpec::getOrientation() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JOrientation>()>("getOrientation");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  Dimensions JHybridNativePlatformSpec::getScreenDimensions() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JDimensions>()>("getScreenDimensions");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  bool JHybridNativePlatformSpec::getPrefersRtlDirection() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getPrefersRtlDirection");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }

} // namespace margelo::nitro::uniwind
